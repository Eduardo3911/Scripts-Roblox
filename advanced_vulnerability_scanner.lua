-- ü§ñ ADVANCED AI VULNERABILITY SCANNER - ROBLOX ü§ñ
-- Vers√£o com IA para detectar vulnerabilidades codificadas e padr√µes suspeitos

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Lighting = game:GetService("Lighting")
local HttpService = game:GetService("HttpService")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

local findings = {}
local aiPatterns = {}
local encodedStrings = {}

-- üß† AI PATTERN DETECTION
local function initializeAIPatterns()
    aiPatterns = {
        -- Padr√µes de nomes suspeitos (codificados)
        encodedNames = {
            base64 = "^[A-Za-z0-9+/]+={0,2}$",
            hex = "^[0-9A-Fa-f]+$",
            rot13 = "^[A-Za-z]+$",
            binary = "^[01]+$"
        },
        
        -- Palavras-chave suspeitas (em diferentes codifica√ß√µes)
        suspiciousKeywords = {
            "admin", "mod", "owner", "god", "hack", "cheat", "exploit",
            "money", "cash", "coin", "gem", "diamond", "gold",
            "speed", "jump", "fly", "noclip", "teleport",
            "health", "damage", "power", "weapon", "kill",
            "spawn", "respawn", "revive", "heal", "shield"
        },
        
        -- Padr√µes de c√≥digo suspeito
        codePatterns = {
            loadstring = "loadstring",
            pcall = "pcall",
            spawn = "spawn",
            wait = "wait",
            print = "print",
            warn = "warn",
            error = "error"
        },
        
        -- Padr√µes de valida√ß√£o fraca
        weakValidation = {
            "if %w+ then",
            "if %w+ == %w+ then",
            "if %w+ ~= %w+ then"
        }
    }
end

-- üîç AI STRING ANALYSIS
local function analyzeStringWithAI(str)
    if not str or type(str) ~= "string" then return nil end
    
    local analysis = {
        isEncoded = false,
        encodingType = nil,
        suspiciousScore = 0,
        decodedValue = nil,
        patterns = {}
    }
    
    -- Detectar Base64
    if string.match(str, aiPatterns.encodedNames.base64) and #str > 10 then
        analysis.isEncoded = true
        analysis.encodingType = "Base64"
        analysis.suspiciousScore = analysis.suspiciousScore + 30
        
        -- Tentar decodificar
        local success, decoded = pcall(function()
            return HttpService:JSONDecode(HttpService:Base64Decode(str))
        end)
        if success then
            analysis.decodedValue = decoded
            analysis.suspiciousScore = analysis.suspiciousScore + 50
        end
    end
    
    -- Detectar Hex
    if string.match(str, aiPatterns.encodedNames.hex) and #str > 8 then
        analysis.isEncoded = true
        analysis.encodingType = "Hex"
        analysis.suspiciousScore = analysis.suspiciousScore + 25
        
        -- Tentar decodificar hex
        local success, decoded = pcall(function()
            return string.char(tonumber(str, 16))
        end)
        if success then
            analysis.decodedValue = decoded
            analysis.suspiciousScore = analysis.suspiciousScore + 40
        end
    end
    
    -- Detectar ROT13
    if string.match(str, aiPatterns.encodedNames.rot13) and #str > 3 then
        local decoded = string.gsub(str, "[A-Za-z]", function(c)
            local byte = string.byte(c)
            if byte >= 65 and byte <= 90 then -- A-Z
                return string.char(((byte - 65 + 13) % 26) + 65)
            elseif byte >= 97 and byte <= 122 then -- a-z
                return string.char(((byte - 97 + 13) % 26) + 97)
            end
            return c
        end)
        
        if decoded ~= str then
            analysis.isEncoded = true
            analysis.encodingType = "ROT13"
            analysis.decodedValue = decoded
            analysis.suspiciousScore = analysis.suspiciousScore + 20
        end
    end
    
    -- Detectar palavras suspeitas
    local lowerStr = string.lower(str)
    for _, keyword in ipairs(aiPatterns.suspiciousKeywords) do
        if string.find(lowerStr, keyword) then
            table.insert(analysis.patterns, "Suspicious keyword: " .. keyword)
            analysis.suspiciousScore = analysis.suspiciousScore + 15
        end
    end
    
    return analysis
end

-- üß† AI CODE ANALYSIS
local function analyzeCodeWithAI(source)
    if not source or type(source) ~= "string" then return nil end
    
    local analysis = {
        suspiciousFunctions = {},
        weakValidations = {},
        potentialExploits = {},
        suspiciousScore = 0
    }
    
    -- Detectar fun√ß√µes suspeitas
    for funcName, _ in pairs(aiPatterns.codePatterns) do
        local count = select(2, string.gsub(source, funcName, ""))
        if count > 0 then
            table.insert(analysis.suspiciousFunctions, {
                function = funcName,
                count = count
            })
            analysis.suspiciousScore = analysis.suspiciousScore + (count * 10)
        end
    end
    
    -- Detectar valida√ß√µes fracas
    for _, pattern in ipairs(aiPatterns.weakValidation) do
        local matches = {}
        for match in string.gmatch(source, pattern) do
            table.insert(matches, match)
        end
        if #matches > 0 then
            table.insert(analysis.weakValidations, {
                pattern = pattern,
                matches = matches
            })
            analysis.suspiciousScore = analysis.suspiciousScore + (#matches * 5)
        end
    end
    
    -- Detectar potenciais exploits
    local exploitPatterns = {
        "game%.Players%.LocalPlayer",
        "game%.Players%.LocalPlayer%.Character",
        "game%.Players%.LocalPlayer%.Backpack",
        "game%.Players%.LocalPlayer%.PlayerGui",
        "game%.Workspace",
        "game%.ReplicatedStorage",
        "game%.Lighting"
    }
    
    for _, pattern in ipairs(exploitPatterns) do
        local count = select(2, string.gsub(source, pattern, ""))
        if count > 0 then
            table.insert(analysis.potentialExploits, {
                pattern = pattern,
                count = count
            })
            analysis.suspiciousScore = analysis.suspiciousScore + (count * 20)
        end
    end
    
    return analysis
end

-- üîç DEEP AI SCAN
local function deepAIScan()
    findings = {}
    encodedStrings = {}
    
    print("ü§ñ Iniciando AI VULNERABILITY SCANNER...")
    initializeAIPatterns()
    
    -- 1. SCAN TODOS OS REMOTES COM IA
    print("üß† Analisando RemoteEvents/Functions com IA...")
    local function scanRemotesWithAI(container, path)
        for _, obj in pairs(container:GetChildren()) do
            if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
                local nameAnalysis = analyzeStringWithAI(obj.Name)
                local severity = "INFO"
                local details = "Remote encontrado"
                
                if nameAnalysis and nameAnalysis.isEncoded then
                    severity = "CRITICAL"
                    details = "Nome CODIFICADO detectado! (" .. nameAnalysis.encodingType .. ")"
                    if nameAnalysis.decodedValue then
                        details = details .. " Decodificado: " .. tostring(nameAnalysis.decodedValue)
                    end
                    table.insert(encodedStrings, {
                        original = obj.Name,
                        decoded = nameAnalysis.decodedValue,
                        type = nameAnalysis.encodingType
                    })
                elseif nameAnalysis and nameAnalysis.suspiciousScore > 20 then
                    severity = "WARNING"
                    details = "Nome SUSPEITO detectado! Score: " .. nameAnalysis.suspiciousScore
                end
                
                addFinding("RemoteEvent", severity, obj.Name, path, details)
            end
            
            if #obj:GetChildren() > 0 then
                scanRemotesWithAI(obj, path .. "/" .. obj.Name)
            end
        end
    end
    
    scanRemotesWithAI(ReplicatedStorage, "ReplicatedStorage")
    scanRemotesWithAI(Workspace, "Workspace")
    
    -- 2. SCAN VALUES COM IA
    print("üß† Analisando Values com IA...")
    local function scanValuesWithAI(container, path)
        for _, obj in pairs(container:GetChildren()) do
            if obj:IsA("IntValue") or obj:IsA("StringValue") or obj:IsA("NumberValue") or 
               obj:IsA("BoolValue") or obj:IsA("ObjectValue") then
                
                local nameAnalysis = analyzeStringWithAI(obj.Name)
                local valueAnalysis = nil
                
                if obj:IsA("StringValue") then
                    valueAnalysis = analyzeStringWithAI(obj.Value)
                end
                
                local severity = "INFO"
                local details = "Value encontrado"
                
                if nameAnalysis and nameAnalysis.isEncoded then
                    severity = "CRITICAL"
                    details = "Nome CODIFICADO! (" .. nameAnalysis.encodingType .. ")"
                    if nameAnalysis.decodedValue then
                        details = details .. " Decodificado: " .. tostring(nameAnalysis.decodedValue)
                    end
                elseif valueAnalysis and valueAnalysis.isEncoded then
                    severity = "CRITICAL"
                    details = "Valor CODIFICADO! (" .. valueAnalysis.encodingType .. ")"
                    if valueAnalysis.decodedValue then
                        details = details .. " Decodificado: " .. tostring(valueAnalysis.decodedValue)
                    end
                elseif (nameAnalysis and nameAnalysis.suspiciousScore > 15) or 
                       (valueAnalysis and valueAnalysis.suspiciousScore > 15) then
                    severity = "WARNING"
                    details = "Conte√∫do SUSPEITO detectado!"
                end
                
                addFinding("Value", severity, obj.Name .. " (" .. obj.ClassName .. ")", path, details)
            end
            
            if #obj:GetChildren() > 0 then
                scanValuesWithAI(obj, path .. "/" .. obj.Name)
            end
        end
    end
    
    scanValuesWithAI(ReplicatedStorage, "ReplicatedStorage")
    scanValuesWithAI(Workspace, "Workspace")
    
    -- 3. SCAN SCRIPTS COM IA
    print("üß† Analisando Scripts com IA...")
    local function scanScriptsWithAI(container, path)
        for _, obj in pairs(container:GetChildren()) do
            if obj:IsA("LocalScript") or obj:IsA("ModuleScript") or obj:IsA("Script") then
                local nameAnalysis = analyzeStringWithAI(obj.Name)
                local severity = "INFO"
                local details = "Script encontrado"
                
                if nameAnalysis and nameAnalysis.isEncoded then
                    severity = "CRITICAL"
                    details = "Script com nome CODIFICADO! (" .. nameAnalysis.encodingType .. ")"
                elseif nameAnalysis and nameAnalysis.suspiciousScore > 10 then
                    severity = "WARNING"
                    details = "Script com nome SUSPEITO!"
                end
                
                -- Tentar analisar o c√≥digo fonte (se poss√≠vel)
                local success, source = pcall(function()
                    return obj.Source
                end)
                
                if success and source then
                    local codeAnalysis = analyzeCodeWithAI(source)
                    if codeAnalysis and codeAnalysis.suspiciousScore > 50 then
                        severity = "CRITICAL"
                        details = "C√ìDIGO SUSPEITO detectado! Score: " .. codeAnalysis.suspiciousScore
                    elseif codeAnalysis and codeAnalysis.suspiciousScore > 20 then
                        severity = "WARNING"
                        details = "C√≥digo com padr√µes suspeitos. Score: " .. codeAnalysis.suspiciousScore
                    end
                end
                
                addFinding("Script", severity, obj.Name, path, details)
            end
            
            if #obj:GetChildren() > 0 then
                scanScriptsWithAI(obj, path .. "/" .. obj.Name)
            end
        end
    end
    
    scanScriptsWithAI(game, "game")
    
    -- 4. SCAN VARI√ÅVEIS GLOBAIS COM IA
    print("üß† Analisando vari√°veis globais com IA...")
    local globalCount = 0
    for k, v in pairs(_G) do
        globalCount = globalCount + 1
        if globalCount > 50 then break end
        
        local keyStr = tostring(k)
        local valueType = type(v)
        local keyAnalysis = analyzeStringWithAI(keyStr)
        
        local severity = "INFO"
        local details = "Vari√°vel global: " .. valueType
        
        if keyAnalysis and keyAnalysis.isEncoded then
            severity = "CRITICAL"
            details = "Vari√°vel global CODIFICADA! (" .. keyAnalysis.encodingType .. ")"
        elseif keyAnalysis and keyAnalysis.suspiciousScore > 10 then
            severity = "WARNING"
            details = "Vari√°vel global SUSPEITA!"
        end
        
        addFinding("Global Variable", severity, keyStr .. " (" .. valueType .. ")", "_G", details)
    end
    
    -- 5. SCAN CONFIGURA√á√ïES AVAN√áADAS
    print("üß† Analisando configura√ß√µes de seguran√ßa...")
    
    -- FilteringEnabled
    addFinding("Security", Workspace.FilteringEnabled and "GOOD" or "CRITICAL", 
              "FilteringEnabled: " .. tostring(Workspace.FilteringEnabled), "Workspace", 
              Workspace.FilteringEnabled and "Seguran√ßa ativada" or "CR√çTICO: Sem prote√ß√£o!")
    
    -- StreamingEnabled
    addFinding("Setting", "INFO", "StreamingEnabled: " .. tostring(Workspace.StreamingEnabled), 
              "Workspace", "Configura√ß√£o de streaming")
    
    -- CharacterAutoLoads
    local playersService = game:GetService("Players")
    addFinding("Setting", "INFO", "CharacterAutoLoads: " .. tostring(playersService.CharacterAutoLoads), 
              "Players", "Sistema de spawn autom√°tico")
    
    -- 6. AN√ÅLISE DE PADR√ïES CODIFICADOS
    print("üß† Analisando padr√µes codificados...")
    if #encodedStrings > 0 then
        addFinding("Encoded Pattern", "CRITICAL", 
                  #encodedStrings .. " strings codificadas encontradas", "AI Analysis", 
                  "Padr√µes de codifica√ß√£o detectados!")
    end
    
    -- RESULTADOS
    print("‚úÖ AI Deep Scan completo!")
    print("üìä ESTAT√çSTICAS:")
    print("   üîó RemoteEvents/Functions analisados")
    print("   üìä Values analisados")
    print("   üìú Scripts analisados")
    print("   üåê Vari√°veis globais analisadas")
    print("   üîê Strings codificadas: " .. #encodedStrings)
    print("   üö® Total de itens: " .. #findings)
    
    return findings, encodedStrings
end

-- Fun√ß√£o para adicionar descoberta
local function addFinding(category, severity, item, location, details)
    table.insert(findings, {
        category = category,
        severity = severity,
        item = item,
        location = location,
        details = details
    })
end

-- üé® INTERFACE AVAN√áADA COM IA
local function createAdvancedGUI(items, encodedStrings)
    local gui = Instance.new("ScreenGui")
    gui.Name = "AIAdvancedScanResults"
    gui.Parent = playerGui
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 600, 0, 500)
    frame.Position = UDim2.new(0.5, -300, 0.5, -250)
    frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    frame.BorderSizePixel = 2
    frame.BorderColor3 = Color3.fromRGB(100, 255, 100)
    frame.Parent = gui
    
    -- T√≠tulo com efeito
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 50)
    title.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    title.BorderSizePixel = 0
    title.Text = "ü§ñ AI VULNERABILITY SCANNER - " .. #items .. " itens"
    title.TextColor3 = Color3.fromRGB(100, 255, 100)
    title.TextSize = 18
    title.Font = Enum.Font.SourceSansBold
    title.Parent = frame
    
    -- Efeito de brilho no t√≠tulo
    local titleGlow = Instance.new("Frame")
    titleGlow.Size = UDim2.new(1, 0, 0, 2)
    titleGlow.Position = UDim2.new(0, 0, 0, 48)
    titleGlow.BackgroundColor3 = Color3.fromRGB(100, 255, 100)
    titleGlow.BorderSizePixel = 0
    titleGlow.Parent = frame
    
    -- Lista com scroll
    local scroll = Instance.new("ScrollingFrame")
    scroll.Size = UDim2.new(1, -10, 1, -120)
    scroll.Position = UDim2.new(0, 5, 0, 55)
    scroll.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    scroll.BorderSizePixel = 1
    scroll.BorderColor3 = Color3.fromRGB(80, 80, 80)
    scroll.ScrollBarThickness = 8
    scroll.Parent = frame
    
    -- Categorizar itens
    local categories = {}
    for _, item in ipairs(items) do
        if not categories[item.category] then
            categories[item.category] = {}
        end
        table.insert(categories[item.category], item)
    end
    
    local yPos = 5
    
    -- Se√ß√£o de strings codificadas
    if #encodedStrings > 0 then
        local encodedHeader = Instance.new("TextLabel")
        encodedHeader.Size = UDim2.new(1, -10, 0, 30)
        encodedHeader.Position = UDim2.new(0, 5, 0, yPos)
        encodedHeader.BackgroundColor3 = Color3.fromRGB(255, 100, 100)
        encodedHeader.BorderSizePixel = 0
        encodedHeader.Text = "üîê STRINGS CODIFICADAS ENCONTRADAS (" .. #encodedStrings .. ")"
        encodedHeader.TextColor3 = Color3.fromRGB(255, 255, 255)
        encodedHeader.TextSize = 14
        encodedHeader.Font = Enum.Font.SourceSansBold
        encodedHeader.TextXAlignment = Enum.TextXAlignment.Left
        encodedHeader.Parent = scroll
        
        yPos = yPos + 35
        
        for _, encoded in ipairs(encodedStrings) do
            local encodedLabel = Instance.new("TextLabel")
            encodedLabel.Size = UDim2.new(1, -20, 0, 25)
            encodedLabel.Position = UDim2.new(0, 15, 0, yPos)
            encodedLabel.BackgroundTransparency = 1
            encodedLabel.Text = "üîì " .. encoded.original .. " ‚Üí " .. tostring(encoded.decoded) .. " (" .. encoded.type .. ")"
            encodedLabel.TextColor3 = Color3.fromRGB(255, 200, 200)
            encodedLabel.TextSize = 12
            encodedLabel.Font = Enum.Font.SourceSans
            encodedLabel.TextXAlignment = Enum.TextXAlignment.Left
            encodedLabel.Parent = scroll
            
            yPos = yPos + 27
        end
        
        yPos = yPos + 10
    end
    
    -- Categorias normais
    for category, categoryItems in pairs(categories) do
        -- Cabe√ßalho da categoria
        local categoryHeader = Instance.new("TextLabel")
        categoryHeader.Size = UDim2.new(1, -10, 0, 30)
        categoryHeader.Position = UDim2.new(0, 5, 0, yPos)
        categoryHeader.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        categoryHeader.BorderSizePixel = 0
        categoryHeader.Text = "üìÅ " .. category .. " (" .. #categoryItems .. ")"
        categoryHeader.TextColor3 = Color3.fromRGB(200, 200, 255)
        categoryHeader.TextSize = 14
        categoryHeader.Font = Enum.Font.SourceSansBold
        categoryHeader.TextXAlignment = Enum.TextXAlignment.Left
        categoryHeader.Parent = scroll
        
        yPos = yPos + 35
        
        -- Itens da categoria
        for _, item in ipairs(categoryItems) do
            local itemLabel = Instance.new("TextLabel")
            itemLabel.Size = UDim2.new(1, -20, 0, 25)
            itemLabel.Position = UDim2.new(0, 15, 0, yPos)
            itemLabel.BackgroundTransparency = 1
            
            -- Cor baseada na severidade
            local colors = {
                CRITICAL = Color3.fromRGB(255, 100, 100),
                WARNING = Color3.fromRGB(255, 200, 100),
                SUSPICIOUS = Color3.fromRGB(255, 255, 100),
                INFO = Color3.fromRGB(200, 200, 200),
                GOOD = Color3.fromRGB(100, 255, 100)
            }
            
            itemLabel.Text = "‚Ä¢ " .. item.item .. " - " .. item.details
            itemLabel.TextColor3 = colors[item.severity] or Color3.fromRGB(255, 255, 255)
            itemLabel.TextSize = 12
            itemLabel.Font = Enum.Font.SourceSans
            itemLabel.TextXAlignment = Enum.TextXAlignment.Left
            itemLabel.Parent = scroll
            
            yPos = yPos + 27
        end
        
        yPos = yPos + 10
    end
    
    scroll.CanvasSize = UDim2.new(0, 0, 0, yPos)
    
    -- Bot√µes
    local buttonFrame = Instance.new("Frame")
    buttonFrame.Size = UDim2.new(1, -10, 0, 40)
    buttonFrame.Position = UDim2.new(0, 5, 1, -45)
    buttonFrame.BackgroundTransparency = 1
    buttonFrame.Parent = frame
    
    -- Bot√£o fechar
    local closeBtn = Instance.new("TextButton")
    closeBtn.Size = UDim2.new(0, 100, 0, 30)
    closeBtn.Position = UDim2.new(1, -105, 0, 5)
    closeBtn.BackgroundColor3 = Color3.fromRGB(150, 0, 0)
    closeBtn.BorderSizePixel = 0
    closeBtn.Text = "Fechar"
    closeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeBtn.TextSize = 12
    closeBtn.Font = Enum.Font.SourceSans
    closeBtn.Parent = buttonFrame
    
    closeBtn.MouseButton1Click:Connect(function()
        gui:Destroy()
    end)
    
    -- Bot√£o re-scan
    local rescanBtn = Instance.new("TextButton")
    rescanBtn.Size = UDim2.new(0, 100, 0, 30)
    rescanBtn.Position = UDim2.new(0, 5, 0, 5)
    rescanBtn.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
    rescanBtn.BorderSizePixel = 0
    rescanBtn.Text = "Re-Scan"
    rescanBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    rescanBtn.TextSize = 12
    rescanBtn.Font = Enum.Font.SourceSans
    rescanBtn.Parent = buttonFrame
    
    rescanBtn.MouseButton1Click:Connect(function()
        gui:Destroy()
        runAIScan()
    end)
end

-- Executar AI scan
local function runAIScan()
    local results, encoded = deepAIScan()
    createAdvancedGUI(results, encoded)
    
    -- Mostrar resultados no console
    print("\nü§ñ AI SCAN RESULTS:")
    print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    
    if #encoded > 0 then
        print("üîê STRINGS CODIFICADAS ENCONTRADAS:")
        for _, encodedStr in ipairs(encoded) do
            print("   " .. encodedStr.original .. " ‚Üí " .. tostring(encodedStr.decoded) .. " (" .. encodedStr.type .. ")")
        end
        print("")
    end
    
    local criticalFound = false
    local warningFound = false
    
    for _, item in ipairs(results) do
        if item.severity == "CRITICAL" then
            if not criticalFound then
                print("üö® CR√çTICOS ENCONTRADOS:")
                criticalFound = true
            end
            print("   " .. item.item .. " - " .. item.details)
        elseif item.severity == "WARNING" then
            if not warningFound then
                print("‚ö†Ô∏è AVISOS:")
                warningFound = true
            end
            print("   " .. item.item .. " - " .. item.details)
        end
    end
    
    if not criticalFound and not warningFound then
        print("‚úÖ Nenhuma vulnerabilidade cr√≠tica encontrada!")
        print("üîç Mas continue atento - vulnerabilidades podem estar escondidas...")
    end
    
    print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
end

-- Auto-executar
spawn(function()
    wait(3)
    runAIScan()
end)

_G.AIScan = runAIScan

print("ü§ñ Advanced AI Vulnerability Scanner carregado!")
print("üß† Este scanner usa IA para detectar padr√µes codificados e vulnerabilidades avan√ßadas!")
print("üîê Capaz de decodificar Base64, Hex, ROT13 e outros padr√µes!")
print("üí° Use _G.AIScan() para executar manualmente")