local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local HttpService = game:GetService("HttpService")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

local findings = {}
local exploitVectors = {}
local sensitiveData = {}

local function initializeExploitPatterns()
    return {
        sensitiveKeywords = {
            "admin", "mod", "owner", "god", "hack", "cheat", "exploit", "bypass",
            "money", "cash", "coins", "currency", "gold", "diamonds", "gems", "robux",
            "health", "hp", "life", "damage", "armor", "shield", "defense",
            "level", "xp", "experience", "rank", "prestige", "skill", "power",
            "speed", "jump", "walk", "run", "fly", "teleport", "noclip",
            "spawn", "respawn", "revive", "heal", "kill", "murder", "death",
            "weapon", "gun", "sword", "knife", "bomb", "explosive", "ammo",
            "password", "secret", "private", "hidden", "internal", "debug"
        },
        
        encodingPatterns = {
            base64 = "^[A-Za-z0-9+/]+={0,2}$",
            hex = "^[0-9A-Fa-f]+$",
            rot13 = "^[A-Za-z]+$",
            binary = "^[01]+$",
            reversed = "^[A-Za-z0-9]+$"
        },
        
        exploitFunctions = {
            "FireServer", "InvokeServer", "RemoteEvent", "RemoteFunction",
            "SetPrimaryPartCFrame", "CFrame", "Humanoid", "Character",
            "Backpack", "PlayerGui", "Instance.new", "GetService",
            "WaitForChild", "loadstring", "pcall", "spawn", "coroutine"
        },
        
        weakValidationPatterns = {
            "if %w+ then", "if %w+ == %w+ then", "if %w+ ~= %w+ then",
            "if %w+ and %w+ then", "if %w+ or %w+ then",
            "check", "validate", "verify", "confirm"
        }
    }
end

local function analyzeStringForExploits(str)
    if not str or type(str) ~= "string" then return nil end
    
    local analysis = {
        isSensitive = false,
        isEncoded = false,
        encodingType = nil,
        decodedValue = nil,
        exploitScore = 0,
        sensitiveType = nil,
        patterns = {}
    }
    
    local lowerStr = string.lower(str)
    
    for _, keyword in ipairs(initializeExploitPatterns().sensitiveKeywords) do
        if string.find(lowerStr, keyword) then
            analysis.isSensitive = true
            analysis.exploitScore = analysis.exploitScore + 25
            
            if string.find(keyword, "admin") or string.find(keyword, "god") or string.find(keyword, "hack") then
                analysis.sensitiveType = "ADMIN"
                analysis.exploitScore = analysis.exploitScore + 40
            elseif string.find(keyword, "money") or string.find(keyword, "cash") or string.find(keyword, "coin") then
                analysis.sensitiveType = "MONEY"
                analysis.exploitScore = analysis.exploitScore + 35
            elseif string.find(keyword, "health") or string.find(keyword, "hp") or string.find(keyword, "life") then
                analysis.sensitiveType = "HEALTH"
                analysis.exploitScore = analysis.exploitScore + 30
            elseif string.find(keyword, "speed") or string.find(keyword, "fly") or string.find(keyword, "teleport") then
                analysis.sensitiveType = "MOVEMENT"
                analysis.exploitScore = analysis.exploitScore + 25
            elseif string.find(keyword, "weapon") or string.find(keyword, "gun") or string.find(keyword, "sword") then
                analysis.sensitiveType = "WEAPON"
                analysis.exploitScore = analysis.exploitScore + 30
            end
            
            table.insert(analysis.patterns, "Sensitive keyword: " .. keyword)
        end
    end
    
    local patterns = initializeExploitPatterns()
    
    if string.match(str, patterns.encodingPatterns.base64) and #str > 8 then
        local success, decoded = pcall(function()
            return HttpService:Base64Decode(str)
        end)
        
        if success then
            analysis.isEncoded = true
            analysis.encodingType = "Base64"
            analysis.exploitScore = analysis.exploitScore + 30
            
            local jsonSuccess, jsonDecoded = pcall(function()
                return HttpService:JSONDecode(decoded)
            end)
            
            if jsonSuccess then
                analysis.decodedValue = jsonDecoded
                analysis.exploitScore = analysis.exploitScore + 40
            else
                analysis.decodedValue = decoded
                analysis.exploitScore = analysis.exploitScore + 30
            end
        end
    end
    
    if string.match(str, patterns.encodingPatterns.hex) and #str > 6 and #str % 2 == 0 then
        local success, decoded = pcall(function()
            local result = ""
            for i = 1, #str, 2 do
                local hexByte = string.sub(str, i, i + 1)
                local byte = tonumber(hexByte, 16)
                if byte then
                    result = result .. string.char(byte)
                end
            end
            return result
        end)
        
        if success and decoded ~= "" then
            analysis.isEncoded = true
            analysis.encodingType = "Hex"
            analysis.decodedValue = decoded
            analysis.exploitScore = analysis.exploitScore + 25
        end
    end
    
    if string.match(str, patterns.encodingPatterns.rot13) and #str > 3 then
        local decoded = string.gsub(str, "[A-Za-z]", function(c)
            local byte = string.byte(c)
            if byte >= 65 and byte <= 90 then
                return string.char(((byte - 65 + 13) % 26) + 65)
            elseif byte >= 97 and byte <= 122 then
                return string.char(((byte - 97 + 13) % 26) + 97)
            end
            return c
        end)
        
        if decoded ~= str then
            local hasSensitiveContent = false
            for _, keyword in ipairs(patterns.sensitiveKeywords) do
                if string.find(string.lower(decoded), keyword) then
                    hasSensitiveContent = true
                    break
                end
            end
            
            if hasSensitiveContent or #decoded > 4 then
                analysis.isEncoded = true
                analysis.encodingType = "ROT13"
                analysis.decodedValue = decoded
                analysis.exploitScore = analysis.exploitScore + 20
            end
        end
    end
    
    return analysis
end

local function analyzeCodeForVulnerabilities(source)
    if not source or type(source) ~= "string" then return nil end
    
    local analysis = {
        exploitFunctions = {},
        weakValidations = {},
        criticalOperations = {},
        exploitScore = 0,
        vulnerabilityLevel = "LOW"
    }
    
    local patterns = initializeExploitPatterns()
    
    for _, funcName in ipairs(patterns.exploitFunctions) do
        local count = select(2, string.gsub(source, funcName, ""))
        if count > 0 then
            table.insert(analysis.exploitFunctions, {
                function = funcName,
                count = count
            })
            analysis.exploitScore = analysis.exploitScore + (count * 20)
        end
    end
    
    for _, pattern in ipairs(patterns.weakValidationPatterns) do
        local matches = {}
        for match in string.gmatch(source, pattern) do
            table.insert(matches, match)
        end
        if #matches > 0 then
            table.insert(analysis.weakValidations, {
                pattern = pattern,
                matches = matches
            })
            analysis.exploitScore = analysis.exploitScore + (#matches * 10)
        end
    end
    
    local criticalPatterns = {
        "game%.Players%.LocalPlayer",
        "game%.Players%.LocalPlayer%.Character",
        "game%.Players%.LocalPlayer%.Backpack",
        "game%.Players%.LocalPlayer%.PlayerGui",
        "game%.Workspace",
        "game%.ReplicatedStorage",
        "game%.Lighting",
        "Humanoid%.Health",
        "Humanoid%.MaxHealth",
        "Humanoid%.WalkSpeed",
        "Humanoid%.JumpPower",
        "Humanoid%.JumpHeight"
    }
    
    for _, pattern in ipairs(criticalPatterns) do
        local count = select(2, string.gsub(source, pattern, ""))
        if count > 0 then
            table.insert(analysis.criticalOperations, {
                pattern = pattern,
                count = count
            })
            analysis.exploitScore = analysis.exploitScore + (count * 30)
        end
    end
    
    if analysis.exploitScore > 100 then
        analysis.vulnerabilityLevel = "CRITICAL"
    elseif analysis.exploitScore > 60 then
        analysis.vulnerabilityLevel = "HIGH"
    elseif analysis.exploitScore > 30 then
        analysis.vulnerabilityLevel = "MEDIUM"
    end
    
    return analysis
end

local function addFinding(category, severity, item, location, details, exploitScore)
    table.insert(findings, {
        category = category,
        severity = severity,
        item = item,
        location = location,
        details = details,
        exploitScore = exploitScore or 0
    })
end

local function exploreGameEnvironment()
    findings = {}
    exploitVectors = {}
    sensitiveData = {}
    
    print("üîç Iniciando EXPLORA√á√ÉO DO AMBIENTE...")
    
    local function scanRemotesForExploits(container, path)
        for _, obj in pairs(container:GetChildren()) do
            if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
                local analysis = analyzeStringForExploits(obj.Name)
                local severity = "INFO"
                local details = "Remote encontrado"
                local exploitScore = 0
                
                if analysis and analysis.isSensitive then
                    if analysis.isEncoded then
                        severity = "CRITICAL"
                        details = "REMOTE SENS√çVEL CODIFICADO! (" .. analysis.sensitiveType .. ")"
                        if analysis.decodedValue then
                            details = details .. " Decodificado: " .. tostring(analysis.decodedValue)
                        end
                        exploitScore = analysis.exploitScore + 50
                    elseif analysis.exploitScore > 40 then
                        severity = "CRITICAL"
                        details = "REMOTE CR√çTICO! (" .. analysis.sensitiveType .. ")"
                        exploitScore = analysis.exploitScore + 40
                    else
                        severity = "WARNING"
                        details = "Remote sens√≠vel (" .. analysis.sensitiveType .. ")"
                        exploitScore = analysis.exploitScore + 20
                    end
                end
                
                addFinding("Remote", severity, obj.Name, path, details, exploitScore)
                table.insert(exploitVectors, {
                    type = "Remote",
                    name = obj.Name,
                    path = path,
                    severity = severity,
                    exploitScore = exploitScore
                })
            end
            
            scanRemotesForExploits(obj, path .. "." .. obj.Name)
        end
    end
    
    local function scanValuesForSensitiveData(container, path)
        for _, obj in pairs(container:GetChildren()) do
            if obj:IsA("IntValue") or obj:IsA("StringValue") or obj:IsA("NumberValue") or obj:IsA("BoolValue") or obj:IsA("ObjectValue") then
                local analysis = analyzeStringForExploits(obj.Name)
                local valueAnalysis = nil
                
                if obj:IsA("StringValue") then
                    valueAnalysis = analyzeStringForExploits(obj.Value)
                elseif obj:IsA("IntValue") or obj:IsA("NumberValue") then
                    if obj.Value > 1000000 or obj.Value < -1000000 then
                        valueAnalysis = { isSensitive = true, exploitScore = 15 }
                    end
                end
                
                local severity = "INFO"
                local details = "Value encontrado"
                local exploitScore = 0
                
                if analysis and analysis.isSensitive then
                    if analysis.isEncoded then
                        severity = "CRITICAL"
                        details = "VALUE SENS√çVEL CODIFICADO! (" .. analysis.sensitiveType .. ")"
                        if analysis.decodedValue then
                            details = details .. " Decodificado: " .. tostring(analysis.decodedValue)
                        end
                        exploitScore = analysis.exploitScore + 45
                    else
                        severity = "WARNING"
                        details = "Value sens√≠vel (" .. analysis.sensitiveType .. ")"
                        exploitScore = analysis.exploitScore + 25
                    end
                end
                
                if valueAnalysis and valueAnalysis.isSensitive then
                    severity = "CRITICAL"
                    details = details .. " VALOR SENS√çVEL!"
                    exploitScore = exploitScore + valueAnalysis.exploitScore + 30
                end
                
                addFinding("Value", severity, obj.Name, path, details, exploitScore)
                table.insert(sensitiveData, {
                    type = "Value",
                    name = obj.Name,
                    path = path,
                    value = obj:IsA("StringValue") and obj.Value or tostring(obj.Value),
                    severity = severity,
                    exploitScore = exploitScore
                })
            end
            
            scanValuesForSensitiveData(obj, path .. "." .. obj.Name)
        end
    end
    
    local function scanScriptsForVulnerabilities(container, path)
        for _, obj in pairs(container:GetChildren()) do
            if obj:IsA("LocalScript") or obj:IsA("Script") or obj:IsA("ModuleScript") then
                local analysis = analyzeStringForExploits(obj.Name)
                local codeAnalysis = nil
                
                local success, source = pcall(function()
                    return obj.Source
                end)
                
                if success and source then
                    codeAnalysis = analyzeCodeForVulnerabilities(source)
                end
                
                local severity = "INFO"
                local details = "Script encontrado"
                local exploitScore = 0
                
                if analysis and analysis.isSensitive then
                    severity = "WARNING"
                    details = "Script sens√≠vel (" .. analysis.sensitiveType .. ")"
                    exploitScore = analysis.exploitScore + 20
                end
                
                if codeAnalysis and codeAnalysis.exploitScore > 0 then
                    if codeAnalysis.vulnerabilityLevel == "CRITICAL" then
                        severity = "CRITICAL"
                        details = "SCRIPT CR√çTICO! Vulnerabilidades encontradas"
                        exploitScore = exploitScore + codeAnalysis.exploitScore + 60
                    elseif codeAnalysis.vulnerabilityLevel == "HIGH" then
                        severity = "WARNING"
                        details = "Script com vulnerabilidades altas"
                        exploitScore = exploitScore + codeAnalysis.exploitScore + 40
                    else
                        severity = "INFO"
                        details = "Script com vulnerabilidades baixas"
                        exploitScore = exploitScore + codeAnalysis.exploitScore + 20
                    end
                end
                
                addFinding("Script", severity, obj.Name, path, details, exploitScore)
            end
            
            scanScriptsForVulnerabilities(obj, path .. "." .. obj.Name)
        end
    end
    
    local function scanGlobalVariables()
        local globalVars = {}
        local count = 0
        
        for name, value in pairs(_G) do
            if count < 100 then
                local analysis = analyzeStringForExploits(name)
                if analysis and analysis.isSensitive then
                    table.insert(globalVars, {
                        name = name,
                        value = tostring(value),
                        analysis = analysis
                    })
                end
                count = count + 1
            end
        end
        
        for _, var in ipairs(globalVars) do
            local severity = "WARNING"
            local details = "Vari√°vel global sens√≠vel (" .. var.analysis.sensitiveType .. ")"
            local exploitScore = var.analysis.exploitScore + 30
            
            if var.analysis.isEncoded then
                severity = "CRITICAL"
                details = "VARI√ÅVEL GLOBAL CODIFICADA! (" .. var.analysis.sensitiveType .. ")"
                if var.analysis.decodedValue then
                    details = details .. " Decodificado: " .. tostring(var.analysis.decodedValue)
                end
                exploitScore = exploitScore + 50
            end
            
            addFinding("Global", severity, var.name, "_G", details, exploitScore)
            table.insert(sensitiveData, {
                type = "Global",
                name = var.name,
                value = var.value,
                severity = severity,
                exploitScore = exploitScore
            })
        end
    end
    
    scanRemotesForExploits(game, "game")
    scanValuesForSensitiveData(game, "game")
    scanScriptsForVulnerabilities(game, "game")
    scanGlobalVariables()
    
    print("‚úÖ Explora√ß√£o conclu√≠da!")
    print("üìä Total de achados: " .. #findings)
    print("üéØ Vetores de exploit: " .. #exploitVectors)
    print("üîê Dados sens√≠veis: " .. #sensitiveData)
end

local function createExploitGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "ExploitScannerGUI"
    screenGui.Parent = playerGui
    
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0.8, 0, 0.9, 0)
    mainFrame.Position = UDim2.new(0.1, 0, 0.05, 0)
    mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "TitleLabel"
    titleLabel.Size = UDim2.new(1, 0, 0.08, 0)
    titleLabel.Position = UDim2.new(0, 0, 0, 0)
    titleLabel.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
    titleLabel.BorderSizePixel = 0
    titleLabel.Text = "üîç EXPLOIT SCANNER - RESULTADOS"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextScaled = true
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.Parent = mainFrame
    
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Name = "ScrollFrame"
    scrollFrame.Size = UDim2.new(1, 0, 0.92, 0)
    scrollFrame.Position = UDim2.new(0, 0, 0.08, 0)
    scrollFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    scrollFrame.BorderSizePixel = 0
    scrollFrame.ScrollBarThickness = 8
    scrollFrame.Parent = mainFrame
    
    local uiListLayout = Instance.new("UIListLayout")
    uiListLayout.Parent = scrollFrame
    uiListLayout.Padding = UDim.new(0, 5)
    uiListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    
    local function createFindingFrame(finding, index)
        local findingFrame = Instance.new("Frame")
        findingFrame.Name = "Finding" .. index
        findingFrame.Size = UDim2.new(1, -10, 0, 80)
        findingFrame.Position = UDim2.new(0, 5, 0, 0)
        findingFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        findingFrame.BorderSizePixel = 0
        findingFrame.Parent = scrollFrame
        
        local severityColor = Color3.fromRGB(100, 100, 100)
        if finding.severity == "CRITICAL" then
            severityColor = Color3.fromRGB(255, 0, 0)
        elseif finding.severity == "WARNING" then
            severityColor = Color3.fromRGB(255, 165, 0)
        elseif finding.severity == "INFO" then
            severityColor = Color3.fromRGB(0, 150, 255)
        end
        
        local severityLabel = Instance.new("TextLabel")
        severityLabel.Name = "SeverityLabel"
        severityLabel.Size = UDim2.new(0.15, 0, 0.3, 0)
        severityLabel.Position = UDim2.new(0, 5, 0, 5)
        severityLabel.BackgroundColor3 = severityColor
        severityLabel.BorderSizePixel = 0
        severityLabel.Text = finding.severity
        severityLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        severityLabel.TextScaled = true
        severityLabel.Font = Enum.Font.GothamBold
        severityLabel.Parent = findingFrame
        
        local categoryLabel = Instance.new("TextLabel")
        categoryLabel.Name = "CategoryLabel"
        categoryLabel.Size = UDim2.new(0.15, 0, 0.3, 0)
        categoryLabel.Position = UDim2.new(0.17, 0, 0, 5)
        categoryLabel.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        categoryLabel.BorderSizePixel = 0
        categoryLabel.Text = finding.category
        categoryLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        categoryLabel.TextScaled = true
        categoryLabel.Font = Enum.Font.Gotham
        categoryLabel.Parent = findingFrame
        
        local scoreLabel = Instance.new("TextLabel")
        scoreLabel.Name = "ScoreLabel"
        scoreLabel.Size = UDim2.new(0.1, 0, 0.3, 0)
        scoreLabel.Position = UDim2.new(0.34, 0, 0, 5)
        scoreLabel.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
        scoreLabel.BorderSizePixel = 0
        scoreLabel.Text = tostring(finding.exploitScore)
        scoreLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        scoreLabel.TextScaled = true
        scoreLabel.Font = Enum.Font.GothamBold
        scoreLabel.Parent = findingFrame
        
        local itemLabel = Instance.new("TextLabel")
        itemLabel.Name = "ItemLabel"
        itemLabel.Size = UDim2.new(0.4, 0, 0.3, 0)
        itemLabel.Position = UDim2.new(0.46, 0, 0, 5)
        itemLabel.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        itemLabel.BorderSizePixel = 0
        itemLabel.Text = finding.item
        itemLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        itemLabel.TextScaled = true
        itemLabel.Font = Enum.Font.Gotham
        itemLabel.Parent = findingFrame
        
        local detailsLabel = Instance.new("TextLabel")
        detailsLabel.Name = "DetailsLabel"
        detailsLabel.Size = UDim2.new(0.95, 0, 0.6, 0)
        detailsLabel.Position = UDim2.new(0.025, 0, 0.35, 0)
        detailsLabel.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
        detailsLabel.BorderSizePixel = 0
        detailsLabel.Text = finding.details
        detailsLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
        detailsLabel.TextScaled = true
        detailsLabel.Font = Enum.Font.Gotham
        detailsLabel.TextWrapped = true
        detailsLabel.Parent = findingFrame
        
        local locationLabel = Instance.new("TextLabel")
        locationLabel.Name = "LocationLabel"
        locationLabel.Size = UDim2.new(0.95, 0, 0.25, 0)
        locationLabel.Position = UDim2.new(0.025, 0, 0.95, 0)
        locationLabel.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
        locationLabel.BorderSizePixel = 0
        locationLabel.Text = "üìç " .. finding.location
        locationLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
        locationLabel.TextScaled = true
        locationLabel.Font = Enum.Font.Gotham
        locationLabel.TextWrapped = true
        locationLabel.Parent = findingFrame
    end
    
    for i, finding in ipairs(findings) do
        createFindingFrame(finding, i)
    end
    
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0.1, 0, 0.08, 0)
    closeButton.Position = UDim2.new(0.9, 0, 0, 0)
    closeButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    closeButton.BorderSizePixel = 0
    closeButton.Text = "X"
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.TextScaled = true
    closeButton.Font = Enum.Font.GothamBold
    closeButton.Parent = mainFrame
    
    closeButton.MouseButton1Click:Connect(function()
        screenGui:Destroy()
    end)
    
    return screenGui
end

local function runExploitScan()
    exploreGameEnvironment()
    
    if #findings > 0 then
        local gui = createExploitGUI()
        
        print("üéØ VULNERABILIDADES ENCONTRADAS:")
        for i, finding in ipairs(findings) do
            local icon = "üîç"
            if finding.severity == "CRITICAL" then
                icon = "üö®"
            elseif finding.severity == "WARNING" then
                icon = "‚ö†Ô∏è"
            elseif finding.severity == "INFO" then
                icon = "‚ÑπÔ∏è"
            end
            
            print(string.format("%s [%s] %s - %s (Score: %d)", 
                icon, finding.severity, finding.category, finding.item, finding.exploitScore))
        end
        
        print("\nüéØ VETORES DE EXPLOIT:")
        for i, vector in ipairs(exploitVectors) do
            print(string.format("üéØ %s: %s em %s (Score: %d)", 
                vector.type, vector.name, vector.path, vector.exploitScore))
        end
        
        print("\nüîê DADOS SENS√çVEIS:")
        for i, data in ipairs(sensitiveData) do
            print(string.format("üîê %s: %s = %s (Score: %d)", 
                data.type, data.name, data.value, data.exploitScore))
        end
    else
        print("‚úÖ Nenhuma vulnerabilidade encontrada!")
    end
end

runExploitScan()